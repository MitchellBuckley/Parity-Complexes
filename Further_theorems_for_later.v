

  Lemma Prop_3_3_ind : forall n M P, is_a_cell (M, P) -> celldim (M, P) (S n) -> 
       (forall m, Lemma_3_2_b_st n m) -> receptive (sup P (S n)).
  Proof with intuition.
    assert (k : nat). admit.
    assert (forall x, dim x <= k). admit.
    destruct k...
      (* dim 0 *)
      unfold receptive...
        inversion H5...
        assert (dim x = S (S (dim x0))).
          apply In_Intersection in H6...
          inversion H8; clear H8...
          assert (S (dim x0) = dim x1)...
          assert (S (dim x1) = dim x )...
          rewrite H6, H10...
        assert (dim x <= 0)...
          rewrite H7 in H8...
        inversion H8...
         admit.
    destruct k...
      (* dim 1 *)
      unfold receptive...
        inversion H5...
        assert (dim x = S (S (dim x0))).
          apply In_Intersection in H6...
          inversion H8; clear H8...
          assert (S (dim x0) = dim x1)...
          assert (S (dim x1) = dim x )...
          rewrite H6, H10...
        assert (dim x <= 1)...
          rewrite H7 in H8...
        inversion H8...
        inversion H10...
         admit.
    destruct k...
      (* dim 2 *)
      unfold receptive...
        inversion H5...
        assert (exists a, (sup P (S n)) == Singleton a). admit. 
        inversion H7; clear H7. 
        rewrite H8 in *. clear H8. rename x1 into a.
        assert (Plus (minus x) ∩ Plus (plus x) == Singleton a).
          apply Included_Singleton...
          admit. 
        apply H4...
        exists a...
        apply In_Intersection... 
        (* but a is in Plus (plus x) and this shouldn't be the case, there is a problem here *) 
        admit.
      admit.
      (* dim > 2 *)
      unfold receptive...
        admit.
        assert (Minus (plus x) ∩ (sub M (S (n))) == Empty_set).
          unfold Lemma_3_2_b_st in H2...
          assert (Finite (plus x))... 
          apply Cardinality_exists in H6... inversion H6. 
          
          admit. 
        (* ?? *) admit. 
      
  Qed.
